import pandas as pd
import joblib
from tensorflow import keras
import numpy as np
import sys
import os


model1 = keras.models.load_model('_internal/clf/clf.h5')
# model1 = joblib.load('_internal/clf/random_forest_model.pkl')

def classification(landmark_data):

    # Remove duplicate IDs
    unique_ids = set()
    filtered_landmarks = []
    for coord_dict in landmark_data:
        landmark_id = list(coord_dict.keys())[0]
        if landmark_id not in unique_ids:
            filtered_landmarks.append(coord_dict)
            unique_ids.add(landmark_id)

    landmark_data = filtered_landmarks

    # Sort by Landmark ID
    landmark_data.sort(key=lambda x: list(x.keys())[0])

    # Fill Missing Landmarks (assuming IDs range from 0 to 32)
    for i in range(33):
        if i not in [list(x.keys())[0] for x in landmark_data]:
            landmark_data.append({i: (0, 0)})  # Fill with (0, 0) or other suitable value
    # print(landmark_data)
    
    # Separate X and Y Coordinates
    x_coordinates = [list(coord.values())[0][0] for coord in landmark_data]
    y_coordinates = [list(coord.values())[0][1] for coord in landmark_data]

    # Convert to DataFrame
    data_dict = {}
    for i in range(33):
        data_dict[f'{i}_X'] = x_coordinates[i]
        data_dict[f'{i}_Y'] = y_coordinates[i]

    # Create the DataFrame
    df = pd.DataFrame(data_dict, index=[0])
    predicted_y = model1.predict(df)
    return predicted_y


# landmark_data0 = [ {15: (112, 72)}, {21: (119, 65)}, {16: (72, 54)}, {20: (63, 57)}, {18: (58, 53)}, {20: (63, 57)}, {3: (112, 77)}, {7: (126, 78)}, {14: (107, 48)}, {16: (72, 54)}, {23: (114, 84)}, {25: (67, 113)}, {28: (103, 12)}, {30: (91, 9)}, {11: (147, 87)}, {23: (114, 84)}, {27: (14, 139)}, {31: (7, 149)}, {6: (107, 69)}, {8: (121, 65)}, {15: (112, 72)}, {17: (107, 67)}, {24: (114, 64)}, {26: (112, 33)}, {16: (72, 54)}, {22: (70, 58)}, {4: (107, 71)}, {5: (107, 70)}, {5: (107, 70)}, {6: (107, 69)}, {29: (2, 139)}, {31: (7, 149)}, {12: (133, 56)}, {24: (114, 64)}, {23: (114, 84)}, {24: (114, 64)}, {0: (103, 72)}, {1: (110, 75)}, {9: (105, 74)}, {10: (103, 71)}, {1: (110, 75)}, {2: (110, 75)}, {0: (103, 72)}, {4: (107, 71)}, {11: (147, 87)}, {13: (114, 91)}, {30: (91, 9)}, {32: (117, 0)}, {28: (103, 12)}, {32: (117, 0)}, {15: (112, 72)}, {19: (117, 63)}, {16: (72, 54)}, {18: (58, 53)}, {25: (67, 113)}, {27: (14, 139)}, {26: (112, 33)}, {28: (103, 12)}, {12: (133, 56)}, {14: (107, 48)}, {17: (107, 67)}, {19: (117, 63)}, {2: (110, 75)}, {3: (112, 77)}, {11: (147, 87)}, {12: (133, 56)}, {27: (14, 139)}, {29: (2, 139)}, {13: (114, 91)}, {15: (112, 72)}]
# predicted_y = classification(landmark_data0)
# y_test_pred_classes = np.argmax(predicted_y, axis=1)
# print("Predicted y:", y_test_pred_classes)

# landmark_data1 = [ {15: (101, 142)}, {21: (99, 147)}, {16: (137, 7)}, {20: (137, 0)}, {18: (138, 0)}, {20: (137, 0)}, {3: (144, 80)}, {7: (143, 82)}, {14: (138, 33)}, {16: (137, 7)}, {23: (55, 64)}, {25: (24, 49)}, {28: (13, 25)}, {30: (11, 24)}, {11: (120, 87)}, {23: (55, 64)}, {27: (16, 37)}, {31: (7, 29)}, {6: (148, 71)}, {8: (149, 69)}, {15: (101, 142)}, {17: (100, 149)}, {24: (68, 51)}, {26: (33, 34)}, {16: (137, 7)}, {22: (136, 3)}, {4: (147, 74)}, {5: (148, 72)}, {5: (148, 72)}, {6: (148, 71)}, {29: (16, 36)}, {31: (7, 29)}, {12: (133, 59)}, {24: (68, 51)}, {23: (55, 64)}, {24: (68, 51)}, {0: (140, 75)}, {1: (145, 78)}, {9: (134, 76)}, {10: (136, 72)}, {1: (145, 78)}, {2: (144, 79)}, {0: (140, 75)}, {4: (147, 74)}, {11: (120, 87)}, {13: (108, 115)}, {30: (11, 24)}, {32: (0, 17)}, {28: (13, 25)}, {32: (0, 17)}, {15: (101, 142)}, {19: (100, 149)}, {16: (137, 7)}, {18: (138, 0)}, {25: (24, 49)}, {27: (16, 37)}, {26: (33, 34)}, {28: (13, 25)}, {12: (133, 59)}, {14: (138, 33)}, {17: (100, 149)}, {19: (100, 149)}, {2: (144, 79)}, {3: (144, 80)}, {11: (120, 87)}, {12: (133, 59)}, {27: (16, 37)}, {29: (16, 36)}, {13: (108, 115)}, {15: (101, 142)}]
# predicted_y = classification(landmark_data1)
# y_test_pred_classes = np.argmax(predicted_y, axis=1)
# print("Predicted y:", y_test_pred_classes)

# landmark_data2 = [{15: (81, 61)}, {21: (79, 65)}, {16: (81, 62)}, {20: (75, 69)}, {18: (72, 70)}, {20: (75, 69)}, {3: (147, 3)}, {7: (139, 2)}, {14: (83, 38)}, {16: (81, 62)}, {23: (75, 61)}, {25: (62, 97)}, {28: (29, 125)}, {30: (12, 129)}, {11: (90, 15)}, {23: (75, 61)}, {27: (19, 134)}, {31: (23, 149)}, {6: (135, 1)}, {8: (120, 0)}, {15: (81, 61)}, {17: (83, 69)}, {24: (49, 59)}, {26: (64, 89)}, {16: (81, 62)}, {22: (87, 67)}, {4: (141, 2)}, {5: (137, 2)}, {5: (137, 2)}, {6: (135, 1)}, {29: (2, 138)}, {31: (23, 149)}, {12: (79, 12)}, {24: (49, 59)}, {23: (75, 61)}, {24: (49, 59)}, {0: (141, 6)}, {1: (145, 3)}, {9: (135, 8)}, {10: (130, 7)}, {1: (145, 3)}, {2: (147, 3)}, {0: (141, 6)}, {4: (141, 2)}, {11: (90, 15)}, {13: (81, 40)}, {30: (12, 129)}, {32: (53, 137)}, {28: (29, 125)}, {32: (53, 137)}, {15: (81, 61)}, {19: (79, 67)}, {16: (81, 62)}, {18: (72, 70)}, {25: (62, 97)}, {27: (19, 134)}, {26: (64, 89)}, {28: (29, 125)}, {12: (79, 12)}, {14: (83, 38)}, {17: (83, 69)}, {19: (79, 67)}, {2: (147, 3)}, {3: (147, 3)}, {11: (90, 15)}, {12: (79, 12)}, {27: (19, 134)}, {29: (2, 138)}, {13: (81, 40)}, {15: (81, 61)}]
# predicted_y = classification(landmark_data2)
# y_test_pred_classes = np.argmax(predicted_y, axis=1)
# print("Predicted y:", y_test_pred_classes)

# landmark_data3 = [{15: (149, 68)}, {21: (148, 56)}, {3: (88, 1)}, {7: (95, 6)}, {14: (6, 95)}, {16: (0, 140)}, {11: (120, 42)}, {23: (108, 129)}, {6: (61, 0)}, {8: (54, 4)}, {15: (149, 68)}, {17: (148, 60)}, {16: (0, 140)}, {22: (6, 149)}, {4: (68, 0)}, {5: (64, 0)}, {5: (64, 0)}, {6: (61, 0)}, {12: (20, 43)}, {24: (43, 132)}, {23: (108, 129)}, {24: (43, 132)}, {0: (72, 5)}, {1: (80, 0)}, {9: (78, 12)}, {10: (65, 11)}, {1: (80, 0)}, {2: (84, 1)}, {0: (72, 5)}, {4: (68, 0)}, {11: (120, 42)}, {13: (132, 96)}, {15: (149, 68)}, {19: (149, 54)}, {12: (20, 43)}, {14: (6, 95)}, {17: (148, 60)}, {19: (149, 54)}, {2: (84, 1)}, {3: (88, 1)}, {11: (120, 42)}, {12: (20, 43)}, {13: (132, 96)}, {15: (149, 68)}]
# predicted_y = classification(landmark_data3)
# y_test_pred_classes = np.argmax(predicted_y, axis=1)
# print("Predicted y:", y_test_pred_classes)

